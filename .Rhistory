library(rgdal)
getwd()
readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
library(magrittr)
data.frame(shp0)
shp0$LANDAREAKM
leaflet(shp0) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", shp$LANDAREAKM)(LANDAREAKM)
)
library(leaflet)
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
leaflet(shp0) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", shp$LANDAREAKM)(LANDAREAKM)
)
leaflet(shp0) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", shp0$LANDAREAKM)(LANDAREAKM)
)
plot(shp0)
leaflet(shp0) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", shp0$LANDAREAKM)(LANDAREAKM)
)
g <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
library(rgdal)
library(magrittr)
library(leaflet)
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
leaflet(shp1) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", shp1$LANDAREAKM)(LANDAREAKM)
)
leaflet(shp1) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", shp1$LANDAREAKM)(LANDAREAKM)
) %>%
addTiles()
cities <- read.csv(textConnection("
City,Lat,Long,Pop
Boston,42.3601,-71.0589,645966
Hartford,41.7627,-72.6743,125017
New York City,40.7127,-74.0059,8406000
Philadelphia,39.9500,-75.1667,1553000
Pittsburgh,40.4397,-79.9764,305841
Providence,41.8236,-71.4222,177994
"))
leaflet(cities) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = 1,
radius = ~sqrt(Pop) * 30, popup = ~City
)
library(shiny)
library(leaflet)
library(RColorBrewer)
source('~/.active-rstudio-document', echo=TRUE)
colorNumeric(10)
row.names(subset(brewer.pal.info, category %in% c("seq", "div"))
colorNumeric())
row.names(subset(brewer.pal.info, category %in% c("seq", "div"))
)
colorNumeric("BrBg", mtcars$mpg)
colorNumeric("BrBG", mtcars$mpg)
dfgd
leaflet(shp1) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", shp1$LANDAREAKM)(LANDAREAKM)
) %>%
addTiles()
library(rgdal)
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
library(leaflet)
library(magrittr)
leaflet(shp1) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
) %>%
color = ~colorQuantile("YlOrRd", shp1$LANDAREAKM)(LANDAREAKM)
addTiles()
library(rgdal)
library(magrittr)
library(leaflet)
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
leaflet(shp1) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", shp1$LANDAREAKM)(LANDAREAKM)
) %>%
addTiles()
leaflet(shp1) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = "red"
) %>%
addTiles()
shiny::runApp()
library(shiny)
library(leaflet)
library(RColorBrewer)
brewer.pal.info
shiny::runApp()
shinyUI(
bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100"),
absolutePanel(top = 10, right = 10,
selectInput("clr", "Colorsheme",
row.names(subset(brewer.pal.info, category %in% c("seq", "div")))
),
)
)
)
shiny::runApp()
shinyUI(
bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100"),
absolutePanel(top = 10, right = 10,
selectInput("clr", "Colorsheme",
row.names(subset(brewer.pal.info, category %in% c("seq", "div")))
)
)
)
)
shinyServer(function(inut, output){
colorpal <- reactive({
colorNumeric(input$clr, shp1$LANDAREAKM)
})
output$map <- renderLeaflet({
leaflet(shp1) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
observe({
pal <- colorpal()
leafletProxy("map", data = shp1) %>%
clearShapes() %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = "green"#color = ~colorQuantile("YlOrRd", shp1$LANDAREAKM)(LANDAREAKM)
)
})
})
shiny::runApp()
shp1$lat
names(shp1)
leaflet(shp1) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
leaflet(shp1) %>% addTiles()
shiny::runApp()
colorpal <- reactive({
colorNumeric(input$clr, shp1$LANDAREAKM)
})
colorpal
leafletProxy("map", data = shp1) %>%
clearShapes() %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = "green"#color = ~colorQuantile("YlOrRd", shp1$LANDAREAKM)(LANDAREAKM)
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
leaflet(shp1) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
names(shp1)
leaflet(shp1) %>% addTiles() %>%
fitBounds(~min(LANDAREAKM), ~min(LANDAREAKM), ~max(LANDAREAKM), ~max(LANDAREAKM))
library(ggplot2)
names(shp1)
fortify(shp1, region = "LNKOD")
library(maptools)
install.packages("maptools")
library(maptools)
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
fortify(shp1, region = "LNKOD")
install.packages("rgeos")
library(rgdal)
library(magrittr)
library(leaflet)
library(ggplot2)
library(maptools)
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
fortify(shp1, region = "LNKOD")
dat0<-fortify(shp1, region = "LNKOD")
names(dat)
names(dat0)
leaflet(shp1) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
leaflet(shp1) %>% addTiles() %>%
fitBounds(-7, 50, -5, 71)
shiny::runApp()
shiny::runApp()
leaflet(quakes) %>% addTiles() %>%
fitBounds(-7, 50, -5, 71)
shiny::runApp()
leaflet(dat0) %>% addTiles() %>%
fitBounds(-7, 50, -5, 71)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
quakes
summary(quakes)
summary(dat0)
shiny::runApp()
shiny::runApp()
shiny::runApp()
min(long)
dat0$long
min(dat0$long)
min(dat0$lat)
max(dat0$long)
max(dat0$lat)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()

})
test
geojson1$features[[1]]
geojson1$features[[1]]$properties$BEF96
test <- sapply(geojson1$features, function(feat) {
feat$properties$BEF96
})
test
pal <- colorQuantile("Greens", colorvar)
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties$BEF96
})
# Color by per-capita GDP using quantiles
pal <- colorQuantile("Greens", colorvar)
pal
plot(1:10)
text("gg"
)
text("gg",x = 5,y = 5)
text("gg",x = 5,y = 5,cex = 10)
text("gg",x = 5,y = 5,cex = 5)
plot(1:10)
text("gg",x = 5,y = 5,cex = 5)
plot(1:10, (1:10)^2)
plot(1:30, (1:30)^2)
plot(1:30, exp(1:30))
plot(1:30, (1:30)^3)
plot(1:30, (1:30)^4)
text("gg",x = 5,y = 5,cex = 5)
plot(1:30, (1:30)^4)
plot(1:30, (1:30)^2)
text("gg",x = 5,y = 5,cex = 5)
plot(1:30, (1:30)^2)
text("gg",x = 15, y = 500, cex = 5)
shiny::runApp()
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
dat0 <- data.frame(shp1)
dat1 <- dat0[,c("LNKOD", "LNNAMN", "BEF05", "LANDAREAKM")]
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
dat0 <- data.frame(shp1)
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
dat1 <- dat0[,c("LNKOD", "LNNAMN", "BEF05", "LANDAREAKM")]
#cant seem to find id- field
#shp1$LNNAMN <- NULL
#shp1$BEF05 <- NULL
#shp1$LANDAREAKM <- NULL
shp1$AREA98KM2 <- NULL
shp1$KOD97 <- NULL
shp1$KOD74_96 <- NULL
shp1$URNAMN <- NULL
shp1$BEF96 <- NULL
names(shp1)
writeOGR(shp1, "lanMap.geojson",'lanMap', driver='GeoJSON')
geojson <- readLines("lanMap.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
color = "teal",
fillColor = "teal",
opacity = 1,
fillOpacity = 0.8
)
geojson$features[[1]]$id
sapply(geojson$featues, function(x){ x$id})
sapply(geojson$featues, function(x){ x$properties$id})
sapply(geojson$featues, function(x){ return(x$properties$id)})
sapply(geojson$featues, function(x){ return(x$id)})
sapply(geojson$featues, function(x)x$properties$id)
sapply(geojson$featues, function(x) x$properties$id)
sapply(geojson$features, function(x) x$properties$id)
sapply(geojson$features, function(x) x$id)
shiny::runApp()
?addGeoJSON
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties$get("BEF05")
})
geojson1 <- geojson
geojson1$style = list(
weight = 1,
color = "purple",
fillColor = "purple",
opacity = 1,
fillOpacity = 0.8
)
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties$get("BEF05")
})
get("BEF05")
eval("BEF05")
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties$eval("BEF05")
})
geojson1$features[1]
geojson1$features[[1]]
geojson1$features[[1]]$properties
geojson1$features[[1]]$properties
geojson1$features[[1]]$properties["BEF05"]
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties$["BEF05"]
})
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties$["BEF05"]
feat$properties["BEF05"]
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties["BEF05"]
})
colorvar
pal <- colorQuantile("Greens", colorvar)
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties["BEF05"]
})
pal <- colorQuantile("Greens", colorvar)
colorvar
unlist(colorvar)
pal <- colorQuantile("Greens", unlist(colorvar))
pal
# repaint
geojson1$features <- lapply(geojson1$features, function(feat) {
feat$properties$style <- list(
fillColor = pal(feat$properties$BEF96),
color = "grey"
)
feat
})
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
# repaint
geojson1$features <- lapply(geojson1$features, function(feat) {
feat$properties$style <- list(
fillColor = pal(feat$properties$BEF05),
color = "grey"
)
feat
})
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
colorvar
pal
pal(199)
geojson$features
lapply(geojson$features, function(feat) {
feat$properties$style <- list(fillColor = "pink", color = "grey")
feat
})
geojson$features <- lapply(geojson$features, function(feat) {
feat$properties$style <- list(fillColor = "pink", color = "grey")
feat
})
leafletProxy("map") %>% clearGeoJSON() %>% addGeoJSON(geojson)
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
shiny::runApp()
shiny::runApp()
shiny::runApp()
colorvar <- sapply(geojson$features, function(feat) {
feat$properties["BEF05"]
})
colorvar
pal <- colorQuantile("Greens", unlist(colorvar))
geojson$features
geojson$features <- lapply(geojson$features, function(feat) {
feat$properties$style <- list(fillColor = pal(feat$properties["BEF05"]),
color = "grey")
feat
})
shiny::runApp()
colorvar <- sapply(geojson$features, function(feat) {
feat$properties["BEF05"]
})
colorvar
pal <- colorQuantile("Greens", unlist(colorvar))
lapply(geojson$features, function(feat) {
feat$properties$style <- list(fillColor = pal(feat$properties["BEF05"]),
color = "grey")
feat
})
shiny::runApp()
geojson$features[[1]]
geojson$features[[1]]$properties
geojson$features[[1]]$properties["BEF05"]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
geojson1 <- geojson
geojson1$style = list(
weight = 1,
color = "purple",
fillColor = "purple",
opacity = 1,
fillOpacity = 0.8
)
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties["BEF05"]
})
# Color by per-capita GDP using quantiles
pal <- colorQuantile("Greens", unlist(colorvar))
# repaint
geojson1$features <- lapply(geojson1$features, function(feat) {
feat$properties$style <- list(
fillColor = pal(feat$properties["BEF05"]),
color = "grey"
)
feat
})
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
colorvar <- sapply(geojson1$features, function(feat) {
feat$properties["BEF05"]
})
# Color by per-capita GDP using quantiles
pal <- colorQuantile("Greens", unlist(colorvar))
# repaint
geojson1$features <- lapply(geojson1$features, function(feat) {
feat$properties$style <- list(
fillColor = pal(feat$properties["BEF05"]),
color = "grey"
)
feat
})
geojson1$features <- lapply(geojson1$features, function(feat) {
feat$properties$style <- list(
fillColor = pal(as.numeric(feat$properties["BEF05"])),
color = "grey"
)
feat
})
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774)
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774) %>%
addControl()
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774) %>%
addLegend()
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774) %>%
addLegend(colors = "green")
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson1) %>%
fitBounds(17.13129, 55.34004, 30.14984, 69.04774) %>%
addLegend(colors = "green", labels = "100")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
geojson$features
geojson$features[[0]]
geojson$features[[1]]
geojson$features
geojson$features[1]
geojson$features[1]["LNNAMN"]
geojson$features[1]
geojson$features[[1]]
geojson$features[[1]]$id
geojson$features[[2]]$id
geojson$features[[20]]$id
geojson$features[[20]]$properties
geojson$features[[20]]$properties$LNNAMN
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
paste(wikilink,"Västra götalands", sep = "/")
wikilink <- "https://sv.wikipedia.org/wiki/"
paste(wikilink,"Västra götalands", sep = "/")
paste(wikilink,"Västra götalands","län")
paste0(wikilink,"Västra götalands","län")
paste0(wikilink,"Västra götalands","_län")
gsub(" ", "_", paste0(wikilink,"Västra götalands","_län")
gsub(" ", "_", paste0(wikilink,"Västra götalands","_län"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list=ls())
library(rgdal)
library(magrittr)
library(leaflet)
library(ggplot2)
library(maptools)
library(rCharts)
library(jsonlite)
setwd("H:/Dokument/Git_repos/shiny/shinyMap")
# -------------------- get shapefile and reformat to geoJSON -------------------
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
dat0 <- data.frame(shp1)
dat1 <- dat0[,c("LNKOD", "LNNAMN", "BEF05", "LANDAREAKM")]
#cant seem to find id- field
#shp1$LNNAMN <- NULL
#shp1$BEF05 <- NULL
#shp1$LANDAREAKM <- NULL
shp1$AREA98KM2 <- NULL
shp1$KOD97 <- NULL
shp1$KOD74_96 <- NULL
shp1$URNAMN <- NULL
shp1$BEF96 <- NULL
shp1$LNNAMN
as.character(shp1$LNNAMN)
enc2utf8(as.character(shp1$LNNAMN))
shp1$LNNAMN <- enc2utf8(as.character(shp1$LNNAMN))
shiny::runApp()
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/shinySweMap')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/shinySweMap')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/shinySweMap')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/shinySweMap')
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
library(rgdal)
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
dat0 <- data.frame(shp1)
dat1 <- dat0[,c("LNKOD", "LNNAMN", "BEF05", "LANDAREAKM")]
#cant seem to find id- field
#shp1$LNNAMN <- NULL
#shp1$BEF05 <- NULL
#shp1$LANDAREAKM <- NULL
shp1$AREA98KM2 <- NULL
shp1$KOD97 <- NULL
shp1$KOD74_96 <- NULL
shp1$URNAMN <- NULL
shp1$BEF96 <- NULL
#shp1$LNNAMN <- enc2utf8(as.character(shp1$LNNAMN))
shp1$LNNAMN <- as.character(shp1$LNNAMN)
shp1$LNNAMN <- enc2utf8(shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¶","ö",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¥","å",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¤","ä",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¶","ö",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã–rebro","Örebro",shp1$LNNAMN)
shp1$LNNAMN[14] <- enc2utf8("Örebro")
shp1$LNNAMN
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
dat0 <- data.frame(shp1)
dat1 <- dat0[,c("LNKOD", "LNNAMN", "BEF05", "LANDAREAKM")]
#cant seem to find id- field
#shp1$LNNAMN <- NULL
#shp1$BEF05 <- NULL
#shp1$LANDAREAKM <- NULL
shp1$AREA98KM2 <- NULL
shp1$KOD97 <- NULL
shp1$KOD74_96 <- NULL
shp1$URNAMN <- NULL
shp1$BEF96 <- NULL
#shp1$LNNAMN <- enc2utf8(as.character(shp1$LNNAMN))
shp1$LNNAMN <- as.character(shp1$LNNAMN)
shp1$LNNAMN <- enc2utf8(shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¶","ö",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¥","å",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¤","ä",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¶","ö",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã–rebro","Örebro",shp1$LNNAMN)
shp1$LNNAMN[14] <- enc2utf8("Örebro")
shp1$LNNAMN[4] <- enc2utf8("Östergötlands")
writeOGR(shp1, "lanMap.geojson",'lanMap', driver='GeoJSON')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/shinySweMap')
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
dat0 <- data.frame(shp1)
dat1 <- dat0[,c("LNKOD", "LNNAMN", "BEF05", "LANDAREAKM")]
#cant seem to find id- field
#shp1$LNNAMN <- NULL
#shp1$BEF05 <- NULL
#shp1$LANDAREAKM <- NULL
shp1$AREA98KM2 <- NULL
shp1$KOD97 <- NULL
shp1$KOD74_96 <- NULL
shp1$URNAMN <- NULL
shp1$BEF96 <- NULL
#shp1$LNNAMN <- enc2utf8(as.character(shp1$LNNAMN))
shp1$LNNAMN <- as.character(shp1$LNNAMN)
shp1$LNNAMN <- enc2utf8(shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¶","ö",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¥","å",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¤","ä",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¶","ö",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã–rebro","Örebro",shp1$LNNAMN)
shp1$LNNAMN[14] <- enc2utf8("Örebro")
shp1$LNNAMN[4] <- enc2utf8("Östergötlands")
shp1$LNNAMN
writeOGR(shp1, "lanMap.geojson",'lanMap', driver='GeoJSON')
geojson <- readLines("lanMap.geojson", warn = FALSE, encoding = "UTF-8") %>%
paste(collapse = "\n") %>%
jsonlite::fromJSON(simplifyVector = FALSE)
shp1$LNNAMN[4]
Encoding(shp1$LNNAMN[4])
shp0 <- readOGR("data/Lan_SCB", layer = "Lansgranser_SCB_07")
shp1 <- spTransform(shp0, CRS("+proj=longlat +datum=WGS84"))
dat0 <- data.frame(shp1)
dat1 <- dat0[,c("LNKOD", "LNNAMN", "BEF05", "LANDAREAKM")]
#cant seem to find id- field
#shp1$LNNAMN <- NULL
#shp1$BEF05 <- NULL
#shp1$LANDAREAKM <- NULL
shp1$AREA98KM2 <- NULL
shp1$KOD97 <- NULL
shp1$KOD74_96 <- NULL
shp1$URNAMN <- NULL
shp1$BEF96 <- NULL
#shp1$LNNAMN <- enc2utf8(as.character(shp1$LNNAMN))
shp1$LNNAMN <- as.character(shp1$LNNAMN)
shp1$LNNAMN <- enc2utf8(shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¶","ö",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¥","å",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¤","ä",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã¶","ö",shp1$LNNAMN)
shp1$LNNAMN <- gsub("Ã–rebro","Örebro",shp1$LNNAMN)
shp1$LNNAMN[14] <- enc2utf8("Örebro")
shp1$LNNAMN[4] <- enc2utf8("Östergötlands")
writeOGR(shp1, "lanMap.geojson",'lanMap', driver='GeoJSON')
shiny::runApp()
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/shinySweMap')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
?leafletProxy
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
install.packages("shinydashboard")
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
install.packages("ggmap")
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
library(shiny)
library(shinydashboard)
require(shiny)
require(leaflet)
library(ggmap)
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
update.packages("htmlwidgets")
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
packageVersion("htmlwidgets")
sessionInfo()
library(htmlwidgets)
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
packageVersion("htmlwidgets")
packageVersion("shiny")
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
update.packages("htmlwidgets",repos = "https://cran.rstudio.com/" )
sessionInfo()
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
update.packages("leaflet",repos = "https://cran.rstudio.com/" )
install.packages("leaflet",repos = "https://cran.rstudio.com/" )
packageVersion("leaflet")
packageVersion("leaflet")!='1.0.0'
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
install.packages("leaflet", repos = "http://ftp.acc.umu.se/mirror/CRAN/")
install.packages("leaflet", repos = "http://ftp.acc.umu.se/mirror/CRAN/")
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/shinySweMap')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/leafletProxyTest')
shiny::runApp('//PSTATfil1W/ShinyShare$/dev/shinySweMap')
